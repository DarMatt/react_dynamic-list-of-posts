{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["PostsList","posts","onSelectedPost","selectedPostId","className","map","post","userId","title","type","onClick","id","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","BASE_URL","request","url","fetch","then","response","json","result","data","getPostComments","postId","addPostComment","method","JSON","stringify","PostDetails","details","setDetails","showComments","setShowComments","comments","setComments","useEffect","api","deleteComment","commentId","length","comment","key","App","setPosts","setUserId","users","setUsers","setSelectedPostId","getUserPosts","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9eefedbf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, onSelectedPost, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => onSelectedPost(post.id)}\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n  })).isRequired,\n  onSelectedPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const createComment = () => {\n    addComment({\n      name,\n      email,\n      body,\n    });\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        createComment();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUsers = () => request('/users');\n","import { request, BASE_URL } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nconst post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const addPostComment = ({\n  selectedPostId,\n  name,\n  email,\n  body,\n}) => post('/comments', {\n  postId: selectedPostId,\n  name,\n  email,\n  body,\n});\n\nexport const deletePostComment = postId => fetch(\n  `${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  },\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport * as api from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [details, setDetails] = useState({});\n  const [showComments, setShowComments] = useState(true);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(setDetails);\n    api.getPostComments(selectedPostId).then(setComments);\n  }, [selectedPostId]);\n\n  const deleteComment = (commentId) => {\n    api.deletePostComment(commentId)\n      .then(() => api.getPostComments(selectedPostId))\n      .then(setComments);\n  };\n\n  const addComment = ({ name, email, body }) => {\n    api.addPostComment({\n      selectedPostId, name, email, body,\n    })\n      .then(() => api.getPostComments(selectedPostId))\n      .then(setComments);\n  };\n\n  return (\n\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPostId && details ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              User: #\n              {details.userId}\n            </p>\n            <p>\n              {details.title}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setShowComments(!showComments);\n              }}\n            >\n              {showComments\n                ? `Hide ${comments.length} comments`\n                : `Show ${comments.length} comments`\n              }\n            </button>\n            {showComments && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        deleteComment(comment.id);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm addComment={addComment} />\n            </div>\n          </section>\n        </>\n      ) : '<<<---Select post'}\n\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getAllPosts = () => request('/posts');\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\n// export const getPostDetails = async(postId) => {\n//   const result = await request(`/posts/${postId}`);\n\n//   return result;\n// };\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/api';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getAllPosts().then(setPosts);\n    } else {\n      getUserPosts(userId).then(setPosts);\n    }\n\n    getUsers().then(setUsers);\n  }, [userId]);\n\n  const setPostId = (postId) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={event => setUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (user.id <= 10 && (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            )))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelectedPost={setPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}